version = '0.1.0'
apply plugin: "jacoco"

dependencies {
    compileOnly("foundation.icon:javaee-api:$javaeeVersion")
    implementation("foundation.icon:javaee-scorex:$scorexVersion")
    implementation project(':score-util')
    implementation project(':lib')
    implementation("com.github.sink772:javaee-tokens:0.6.0")

    //for generate ScoreClient
    compileOnly("foundation.icon:javaee-score-client:$scoreClientVersion")
    annotationProcessor("foundation.icon:javaee-score-client:$scoreClientVersion")
    compileOnly("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    compileOnly project(':icon-sdk-java')

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.2")

    testImplementation("foundation.icon:javaee-unittest:$javaeeUnittestVersion")
    testImplementation project(':test-lib')
    testAnnotationProcessor("foundation.icon:javaee-score-client:$scoreClientVersion")
    testImplementation("foundation.icon:javaee-score-client:$scoreClientVersion")
    testImplementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    testImplementation("foundation.icon:icon-sdk:$iconsdkVersion")
    testImplementation("com.github.javafaker:javafaker:1.0.2")
}

optimizedJar {
    mainClassName = 'foundation.icon.btp.nativecoin.NativeCoinService'
//    archivesBaseName = 'nativecoin'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } { exclude "score/*" }
    enableDebug = debugJar
}

import foundation.icon.gradle.plugins.javaee.task.OptimizedJar

task optimizedJarIRC31(type: OptimizedJar) {
    mainClassName = 'foundation.icon.btp.nativecoin.irc31.OwnerBasedIRC31Supplier'
    archiveName("irc31-" + archiveVersion.get() + "." + archiveExtension.get());
    from { sourceSets.main.output }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } { exclude "score/*" }
    enableDebug = debugJar
}

deployJar {
    endpoints {
        gangnam {
            uri = 'https://gicon.net.solidwallet.io/api/v3'
            nid = 7
        }
        local {
            uri = scoreTest.url
            nid = scoreTest.parseNid(scoreTest.nid)
        }
    }
    keystore = scoreTest.default.keyStore
    password = scoreTest.default.resolvedKeyPassword
    parameters {[
            arg('_bmc', 'cx...'),
            arg('_irc31', 'cx...'),
            arg('_name', 'src')
        ]
    }
}

test {
    useJUnitPlatform {
        if (!integrationTest) {
            excludeTags("integration")
        }
    }
    options {
        testLogging.showStandardStreams = true
        systemProperty 'url', scoreTest.url
        systemProperty 'nid', scoreTest.nid
        systemProperty 'keyStore', scoreTest.default.keyStore
        systemProperty 'keyPassword', scoreTest.default.resolvedKeyPassword
//        systemProperty 'address', "cxd81b47925568321bdf8bb123cb1738a0dc4c5458"
//        systemProperty 'isUpdate', "true"
        dependsOn optimizedJar
        systemProperty 'scoreFilePath', project.tasks.optimizedJar.outputJarName
        project.extensions.deployJar.arguments.each {
            arg -> systemProperty 'params.'+arg.name, arg.value
        }

        systemProperty 'tester.keyStore', scoreTest.tester.keyStore
        systemProperty 'tester.keyPassword', scoreTest.tester.resolvedKeyPassword

        systemProperty 'irc31.url', scoreTest.url
        systemProperty 'irc31.nid', scoreTest.nid
        systemProperty 'irc31.keyStore', scoreTest.default.keyStore
        systemProperty 'irc31.keyPassword', scoreTest.default.resolvedKeyPassword
//        systemProperty 'irc31.address', "cxb25cd0f4535726517800983c262c081df0a48731"
//        systemProperty 'irc31.isUpdate', "true"
        dependsOn optimizedJarIRC31
        systemProperty 'irc31.scoreFilePath', project.tasks.optimizedJarIRC31.outputJarName

        //for bmc-mock client
        systemProperty 'bmc-mock.url', scoreTest.url
        systemProperty 'bmc-mock.nid', scoreTest.nid
        systemProperty 'bmc-mock.keyStore', scoreTest.default.keyStore
        systemProperty 'bmc-mock.keyPassword', scoreTest.default.resolvedKeyPassword
//        systemProperty 'bmc-mock.address', "cxb0b4e42d25e8f7a0e4f9d4c3853c3515c6cf2f2b"
//        systemProperty 'bmc-mock.isUpdate', "true"
        dependsOn ":test-lib:optimizedJarMockBMC"
        systemProperty 'bmc-mock.scoreFilePath', tasks.getByPath(":test-lib:optimizedJarMockBMC").outputJarName
        systemProperty 'bmc-mock.params._net', scoreTest.nid+'.icon'
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled true
    }
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
}
