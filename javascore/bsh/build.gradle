plugins {
    id 'java'
}
apply plugin: "jacoco"

repositories {
    mavenCentral()
}

version '0.1.0'

dependencies {
    compileOnly "foundation.icon:javaee-api:$javaeeVersion"
    implementation "foundation.icon:javaee-scorex:$scorexVersion"
    implementation 'org.msgpack:msgpack-core:0.8.17'

    testImplementation "foundation.icon:javaee-rt:$javaeeVersion"
    testImplementation "foundation.icon:icon-sdk:$iconsdkVersion"
    testImplementation "foundation.icon:javaee-unittest:$javaeeUnittestVersion"
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'com.squareup.okhttp3:okhttp:3.11.0'
    testImplementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testImplementation 'org.bouncycastle:bcprov-jdk15on:1.69'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

optimizedJar {
    mainClassName = 'foundation.icon.btp.bsh.ServiceHandler'
    archivesBaseName = 'bsh'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

import foundation.icon.gradle.plugins.javaee.task.OptimizedJar

task optimizedJarIRC2(type: OptimizedJar) {
    mainClassName = 'foundation.icon.btp.irc2.IRC2Basic'
    archiveName("irc2-" + archiveVersion.get() + "." + archiveExtension.get())
    from { sourceSets.main.output }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } { exclude "score/*" }
    enableDebug = debugJar
}

deployJar {
    endpoints {
        gangnam {
            uri = 'https://gicon.net.solidwallet.io/api/v3'
            nid = 7
        }
        Sejong {
            uri = 'https://sejong.net.solidwallet.io/api/v3'
            nid = 0x53
        }
        local {
            uri = 'http://localhost:9082/api/v3'
            nid = 3
        }
        BTPTestnet {
            uri = 'https://btp.net.solidwallet.io/api/v3'
            nid = 	0x42
        }
    }
    keystore = rootProject.hasProperty('keystoreName') ? "$keystoreName" : ''
    password = rootProject.hasProperty('keystorePass') ? "$keystorePass" : ''

    parameters {
        arg('_bmc', System.getProperty("BMC_ADDRESS"))
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled true
    }
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
}

